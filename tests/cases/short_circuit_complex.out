Parsing completed successfully.

--- Abstract Syntax Tree ---
+-- ROOT
|   +-- FUNC_DEF: sum (sym: sum, id: 24)
|   |   +-- LIST: FParams
|   |   |   +-- VAR_DEF: a (sym: a, id: 25)
|   |   |   +-- VAR_DEF: b (sym: b, id: 26)
|   |   +-- LIST: Block
|   |   |   +-- RETURN_STMT
|   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   +-- VAR (sym: a, id: 25)
|   |   |   |   |   +-- VAR (sym: b, id: 26)
|   +-- FUNC_DEF: main (sym: main, id: 27)
|   |   +-- LIST: FParams
|   |   +-- LIST: Block
|   |   |   +-- VAR_DEF: a (sym: a, id: 28)
|   |   |   |   +-- CONST (int value: 0)
|   |   |   +-- VAR_DEF: b (sym: b, id: 29)
|   |   |   |   +-- CONST (int value: 1)
|   |   |   +-- VAR_DEF: c (sym: c, id: 30)
|   |   |   |   +-- CONST (int value: 2)
|   |   |   +-- VAR_DEF: d (sym: d, id: 31)
|   |   |   |   +-- CONST (int value: 4)
|   |   |   +-- VAR_DEF: result (sym: result, id: 32)
|   |   |   |   +-- CONST (int value: 0)
|   |   |   +-- IF_STMT
|   |   |   |   +-- BINARY_OP: ||
|   |   |   |   |   +-- BINARY_OP: ||
|   |   |   |   |   |   +-- BINARY_OP: &&
|   |   |   |   |   |   |   +-- VAR (sym: a, id: 28)
|   |   |   |   |   |   |   +-- VAR (sym: b, id: 29)
|   |   |   |   |   |   +-- VAR (sym: c, id: 30)
|   |   |   |   |   +-- BINARY_OP: &&
|   |   |   |   |   |   +-- BINARY_OP: &&
|   |   |   |   |   |   |   +-- VAR (sym: d, id: 31)
|   |   |   |   |   |   |   +-- VAR (sym: a, id: 28)
|   |   |   |   |   |   +-- UNARY_OP: !
|   |   |   |   |   |   |   +-- VAR (sym: c, id: 30)
|   |   |   |   +-- LIST: If-2
|   |   |   |   |   +-- ASSIGN_STMT
|   |   |   |   |   |   +-- VAR (sym: result, id: 32)
|   |   |   |   |   |   +-- CONST (int value: 1)
|   |   |   +-- RETURN_STMT
|   |   |   |   +-- VAR (sym: result, id: 32)

--- Permanent Symbol Table ---
ID    Name                 Type            Data Type  Function             Shape     
-------------------------------------------------------------------------------------
0     getint               function        int        N/A                  N/A       
1     getch                function        int        N/A                  N/A       
2     getfloat             function        float      N/A                  N/A       
3     getarray             function        int        N/A                  N/A       
4     array                array           int        getarray             0
5     getfarray            function        int        N/A                  N/A       
6     array                array           float      getfarray            0
7     putint               function        void       N/A                  N/A       
8     value                var             int        putint               N/A       
9     putch                function        void       N/A                  N/A       
10    value                var             int        putch                N/A       
11    putfloat             function        void       N/A                  N/A       
12    value                var             float      putfloat             N/A       
13    putarray             function        void       N/A                  N/A       
14    len                  var             int        putarray             N/A       
15    array                array           int        putarray             0
16    putfarray            function        void       N/A                  N/A       
17    len                  var             int        putfarray            N/A       
18    array                array           float      putfarray            0
19    putf                 function        void       N/A                  N/A       
20    format_string        var             char       putf                 N/A       
21    value                var             int        putf                 N/A       
22    starttime            function        void       N/A                  N/A       
23    stoptime             function        void       N/A                  N/A       
24    sum                  function        int        N/A                  N/A       
25    a                    var             int        sum                  N/A       
26    b                    var             int        sum                  N/A       
27    main                 function        int        N/A                  N/A       
28    a                    var             int        main                 N/A       
29    b                    var             int        main                 N/A       
30    c                    var             int        main                 N/A       
31    d                    var             int        main                 N/A       
32    result               var             int        main                 N/A       
-------------------------------------------------------------------------------------

--- Generated IR ---
; ModuleID = 'main'

define i32 @sum(i32 %param.a.25, i32 %param.b.26) {
sum.entry:
  %a.25 = alloca i32
  %b.26 = alloca i32
  store i32 %param.a.25, i32* %a.25
  store i32 %param.b.26, i32* %b.26
  %0 = load i32, i32* %a.25
  %1 = load i32, i32* %b.26
  %add.2 = add i32 %0, %1
  ret i32 %add.2
}

define i32 @main() {
main.entry:
  %a.28 = alloca i32
  %b.29 = alloca i32
  %c.30 = alloca i32
  %d.31 = alloca i32
  %result.32 = alloca i32
  store i32 0, i32* %a.28
  store i32 1, i32* %b.29
  store i32 2, i32* %c.30
  store i32 4, i32* %d.31
  store i32 0, i32* %result.32
  %3 = load i32, i32* %a.28
  %tobool.4 = icmp ne i32 %3, 0
  br i1 %tobool.4, label %and.3.rhs, label %and.3.merge
and.3.rhs:
  %5 = load i32, i32* %b.29
  %tobool.6 = icmp ne i32 %5, 0
  br label %and.3.merge
and.3.merge:
  %and.3.result = phi i1 [ 0, %main.entry ], [ %tobool.6, %and.3.rhs ]
  br i1 %and.3.result, label %or.2.merge, label %or.2.rhs
or.2.rhs:
  %7 = load i32, i32* %c.30
  %tobool.8 = icmp ne i32 %7, 0
  br label %or.2.merge
or.2.merge:
  %or.2.result = phi i1 [ 1, %and.3.merge ], [ %tobool.8, %or.2.rhs ]
  br i1 %or.2.result, label %or.1.merge, label %or.1.rhs
or.1.rhs:
  %9 = load i32, i32* %d.31
  %tobool.10 = icmp ne i32 %9, 0
  br i1 %tobool.10, label %and.5.rhs, label %and.5.merge
or.1.merge:
  %or.1.result = phi i1 [ 1, %or.2.merge ], [ %and.4.result, %and.4.merge ]
  br i1 %or.1.result, label %if.0.then, label %if.0.merge
and.5.rhs:
  %11 = load i32, i32* %a.28
  %tobool.12 = icmp ne i32 %11, 0
  br label %and.5.merge
and.5.merge:
  %and.5.result = phi i1 [ 0, %or.1.rhs ], [ %tobool.12, %and.5.rhs ]
  br i1 %and.5.result, label %and.4.rhs, label %and.4.merge
and.4.rhs:
  %13 = load i32, i32* %c.30
  %not.14 = icmp eq i32 %13, 0
  br label %and.4.merge
and.4.merge:
  %and.4.result = phi i1 [ 0, %and.5.merge ], [ %not.14, %and.4.rhs ]
  br label %or.1.merge
if.0.then:
  store i32 1, i32* %result.32
  br label %if.0.merge
if.0.merge:
  %15 = load i32, i32* %result.32
  ret i32 %15
}


