Parsing completed successfully.

--- Abstract Syntax Tree ---
+-- ROOT
|   +-- CONST_VAR_DEF: g (sym: g, id: 26)
|   |   +-- CONST (int value: 14)
|   +-- CONST_VAR_DEF: N (sym: N, id: 27)
|   |   +-- CONST (int value: 10000)
|   +-- ARRAY_DEF: data (sym: data, id: 28)
|   |   +-- LIST: ArrayIniter
|   |   |   +-- CONST (int value: 0)
|   |   |   +-- CONST (int value: 1)
|   |   |   +-- CONST (int value: 2)
|   |   |   +-- CONST (int value: 3)
|   |   |   +-- CONST (int value: 4)
|   +-- ARRAY_DEF: data2 (sym: data2, id: 29)
|   |   +-- LIST: ArrayIniter
|   |   |   +-- LIST: ArrayIniter
|   |   |   |   +-- CONST (int value: 1)
|   |   |   +-- LIST: ArrayIniter
|   |   |   |   +-- CONST (int value: 2)
|   |   |   |   +-- CONST (int value: 3)
|   +-- FUNC_DEF: sum (sym: sum, id: 30)
|   |   +-- LIST: FParams
|   |   |   +-- ARRAY_DEF: a (sym: a, id: 31)
|   |   |   +-- ARRAY_DEF: arr (sym: arr, id: 32)
|   |   |   +-- ARRAY_DEF: arr2 (sym: arr2, id: 33)
|   |   +-- LIST: Block
|   |   |   +-- RETURN_STMT: sum (sym: sum, id: 30)
|   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: a, id: 31)
|   |   |   |   |   |   |   |   |   +-- CONST (int value: 0)
|   |   |   |   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: arr, id: 32)
|   |   |   |   |   |   |   |   |   +-- CONST (int value: 0)
|   |   |   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: arr, id: 32)
|   |   |   |   |   |   |   |   +-- CONST (int value: 1)
|   |   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: arr2, id: 33)
|   |   |   |   |   |   |   +-- CONST (int value: 0)
|   |   |   |   |   |   |   +-- CONST (int value: 0)
|   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: arr2, id: 33)
|   |   |   |   |   |   +-- CONST (int value: 0)
|   |   |   |   |   |   +-- CONST (int value: 1)
|   +-- FUNC_DEF: main (sym: main, id: 34)
|   |   +-- LIST: FParams
|   |   +-- LIST: Block
|   |   |   +-- VAR_DEF: a (sym: a, id: 35)
|   |   |   |   +-- CONST (int value: 5)
|   |   |   +-- ARRAY_DEF: b (sym: b, id: 36)
|   |   |   |   +-- LIST: ArrayIniter
|   |   |   |   |   +-- CONST (int value: 4)
|   |   |   |   |   +-- CONST (int value: 3)
|   |   |   |   |   +-- CONST (int value: 2)
|   |   |   |   |   +-- CONST (int value: 1)
|   |   |   +-- ARRAY_DEF: c (sym: c, id: 37)
|   |   |   |   +-- LIST: ArrayIniter
|   |   |   |   |   +-- LIST: ArrayIniter
|   |   |   |   |   |   +-- CONST (int value: 1)
|   |   |   |   |   |   +-- CONST (int value: 2)
|   |   |   |   |   +-- LIST: ArrayIniter
|   |   |   |   |   |   +-- CONST (int value: 3)
|   |   |   |   |   |   +-- CONST (int value: 4)
|   |   |   +-- RETURN_STMT: main (sym: main, id: 34)
|   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   |   |   |   +-- VAR (sym: a, id: 35)
|   |   |   |   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: data, id: 28)
|   |   |   |   |   |   |   |   |   +-- CONST (int value: 1)
|   |   |   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: b, id: 36)
|   |   |   |   |   |   |   |   +-- CONST (int value: 3)
|   |   |   |   |   |   +-- CONST (int value: 14)
|   |   |   |   |   +-- FUNC_CALL: sum (sym: sum, id: 30)
|   |   |   |   |   |   +-- ARRAY (sym: b, id: 36)
|   |   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: c, id: 37)
|   |   |   |   |   |   |   +-- CONST (int value: 0)
|   |   |   |   |   |   +-- ARRAY (sym: data2, id: 29)

--- Permanent Symbol Table ---
ID    Name                 Type            Data Type  Function             Shape     
-------------------------------------------------------------------------------------
0     getint               function        int        N/A                  N/A       
1     getch                function        int        N/A                  N/A       
2     getfloat             function        float      N/A                  N/A       
3     getarray             function        int        N/A                  N/A       
4     array                array           int        getarray             0
5     getfarray            function        int        N/A                  N/A       
6     array                array           float      getfarray            0
7     putint               function        void       N/A                  N/A       
8     value                var             int        putint               N/A       
9     putch                function        void       N/A                  N/A       
10    value                var             int        putch                N/A       
11    putfloat             function        void       N/A                  N/A       
12    value                var             float      putfloat             N/A       
13    putarray             function        void       N/A                  N/A       
14    len                  var             int        putarray             N/A       
15    array                array           int        putarray             0
16    putfarray            function        void       N/A                  N/A       
17    len                  var             int        putfarray            N/A       
18    array                array           float      putfarray            0
19    putf                 function        void       N/A                  N/A       
20    format_string        var             char       putf                 N/A       
21    value                var             int        putf                 N/A       
22    starttime            function        void       N/A                  N/A       
23    line                 var             int        starttime            N/A       
24    stoptime             function        void       N/A                  N/A       
25    line                 var             int        stoptime             N/A       
26    g                    const var       int        N/A                  N/A       
27    N                    const var       int        N/A                  N/A       
28    data                 array           int        N/A                  10000
29    data2                array           int        N/A                  10000 5
30    sum                  function        int        N/A                  N/A       
31    a                    array           int        sum                  0
32    arr                  array           int        sum                  0
33    arr2                 array           int        sum                  0 5
34    main                 function        int        N/A                  N/A       
35    a                    var             int        main                 N/A       
36    b                    array           int        main                 10
37    c                    array           int        main                 5 5
-------------------------------------------------------------------------------------

--- Generated IR ---
; ModuleID = 'main'

@g.26 = internal global i32 14
@N.27 = internal global i32 10000
@data.28 = external global [10000 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4]
@data2.29 = external global [10000 x [5 x i32]] [[5 x i32] [i32 1], [5 x i32] [i32 2, i32 3]]

define i32 @sum(i32* %param.a.31, i32* %param.arr.32, [5 x i32]* %param.arr2.33) {
sum.entry:
  %0 = getelementptr i32*, i32* %param.a.31, i32 0
  %1 = load i32, i32* %0
  %2 = getelementptr i32*, i32* %param.arr.32, i32 0
  %3 = load i32, i32* %2
  %add.4 = add i32 %1, %3
  %5 = getelementptr i32*, i32* %param.arr.32, i32 1
  %6 = load i32, i32* %5
  %add.7 = add i32 %add.4, %6
  %8 = getelementptr [5 x i32]*, [5 x i32]* %param.arr2.33, i32 0
  %9 = getelementptr [5 x i32], [5 x i32]* %8, i32 0
  %10 = load i32, i32* %9
  %add.11 = add i32 %add.7, %10
  %12 = getelementptr [5 x i32]*, [5 x i32]* %param.arr2.33, i32 0
  %13 = getelementptr [5 x i32], [5 x i32]* %12, i32 1
  %14 = load i32, i32* %13
  %add.15 = add i32 %add.11, %14
  ret i32 %add.15
}

define i32 @main() {
main.entry:
  %a.35 = alloca i32
  %b.36 = alloca [10 x i32]
  %c.37 = alloca [5 x [5 x i32]]
  store i32 5, i32* %a.35
  %b.36.initer = alloca i32
  store i32 0, i32* %b.36.initer
  br label %b.36.initer.while.cond
b.36.initer.while.cond:
  %20 = load i32, i32* %b.36.initer
  %lt.21 = icmp slt i32 %20, 10
  br i1 %lt.21, label %b.36.initer.while.loop, label %b.36.initer.while.merge
b.36.initer.while.loop:
  %16 = load i32, i32* %b.36.initer
  %17 = getelementptr [10 x i32], [10 x i32]* %b.36, i32 %16
  store i32 0, i32* %17
  %18 = load i32, i32* %b.36.initer
  %19 = add i32 %18, 1
  store i32 %19, i32* %b.36.initer
  br label %b.36.initer.while.cond
b.36.initer.while.merge:
  %22 = getelementptr [10 x i32], [10 x i32]* %b.36, i32 0
  store i32 4, i32* %22
  %23 = getelementptr [10 x i32], [10 x i32]* %b.36, i32 1
  store i32 3, i32* %23
  %24 = getelementptr [10 x i32], [10 x i32]* %b.36, i32 2
  store i32 2, i32* %24
  %25 = getelementptr [10 x i32], [10 x i32]* %b.36, i32 3
  store i32 1, i32* %25
  %c.37.initer = alloca i32
  store i32 0, i32* %c.37.initer
  br label %c.37.initer.while.cond
c.37.initer.while.cond:
  %30 = load i32, i32* %c.37.initer
  %lt.31 = icmp slt i32 %30, 25
  br i1 %lt.31, label %c.37.initer.while.loop, label %c.37.initer.while.merge
c.37.initer.while.loop:
  %26 = load i32, i32* %c.37.initer
  %27 = getelementptr [25 x i32], [5 x [5 x i32]]* %c.37, i32 %26
  store i32 0, i32* %27
  %28 = load i32, i32* %c.37.initer
  %29 = add i32 %28, 1
  store i32 %29, i32* %c.37.initer
  br label %c.37.initer.while.cond
c.37.initer.while.merge:
  %32 = getelementptr [25 x i32], [5 x [5 x i32]]* %c.37, i32 0
  store i32 1, i32* %32
  %33 = getelementptr [25 x i32], [5 x [5 x i32]]* %c.37, i32 1
  store i32 2, i32* %33
  %34 = getelementptr [25 x i32], [5 x [5 x i32]]* %c.37, i32 5
  store i32 3, i32* %34
  %35 = getelementptr [25 x i32], [5 x [5 x i32]]* %c.37, i32 6
  store i32 4, i32* %35
  %36 = load i32, i32* %a.35
  %37 = getelementptr [10000 x i32], [10000 x i32]* @data.28, i32 1
  %38 = load i32, i32* %37
  %add.39 = add i32 %36, %38
  %40 = getelementptr [10 x i32], [10 x i32]* %b.36, i32 3
  %41 = load i32, i32* %40
  %add.42 = add i32 %add.39, %41
  %add.43 = add i32 %add.42, 14
  %44 = getelementptr [5 x [5 x i32]], [5 x [5 x i32]]* %c.37, i32 0
  %45 = call i32 @sum([10 x i32]* %b.36, [5 x i32]* %44, [10000 x [5 x i32]]* @data2.29)
  %add.46 = add i32 %add.43, %45
  ret i32 %add.46
}


