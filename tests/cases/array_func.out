Parsing completed successfully.

--- Abstract Syntax Tree ---
+-- ROOT
|   +-- CONST_VAR_DEF: g (sym: g, id: 24)
|   |   +-- CONST (int value: 14)
|   +-- CONST_VAR_DEF: N (sym: N, id: 25)
|   |   +-- CONST (int value: 10000)
|   +-- ARRAY_DEF: data (sym: data, id: 26)
|   |   +-- LIST: ArrayIniter
|   |   |   +-- CONST (int value: 0)
|   |   |   +-- CONST (int value: 1)
|   |   |   +-- CONST (int value: 2)
|   |   |   +-- CONST (int value: 3)
|   |   |   +-- CONST (int value: 4)
|   +-- ARRAY_DEF: data2 (sym: data2, id: 27)
|   |   +-- LIST: ArrayIniter
|   |   |   +-- LIST: ArrayIniter
|   |   |   |   +-- CONST (int value: 1)
|   |   |   +-- LIST: ArrayIniter
|   |   |   |   +-- CONST (int value: 2)
|   |   |   |   +-- CONST (int value: 3)
|   +-- FUNC_DEF: sum (sym: sum, id: 28)
|   |   +-- LIST: FParams
|   |   |   +-- ARRAY_DEF: a (sym: a, id: 29)
|   |   |   +-- ARRAY_DEF: arr (sym: arr, id: 30)
|   |   |   +-- ARRAY_DEF: arr2 (sym: arr2, id: 31)
|   |   +-- LIST: Block
|   |   |   +-- RETURN_STMT
|   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: a, id: 29)
|   |   |   |   |   |   |   |   |   +-- CONST (int value: 0)
|   |   |   |   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: arr, id: 30)
|   |   |   |   |   |   |   |   |   +-- CONST (int value: 0)
|   |   |   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: arr, id: 30)
|   |   |   |   |   |   |   |   +-- CONST (int value: 1)
|   |   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: arr2, id: 31)
|   |   |   |   |   |   |   +-- CONST (int value: 0)
|   |   |   |   |   |   |   +-- CONST (int value: 0)
|   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: arr2, id: 31)
|   |   |   |   |   |   +-- CONST (int value: 0)
|   |   |   |   |   |   +-- CONST (int value: 1)
|   +-- FUNC_DEF: main (sym: main, id: 32)
|   |   +-- LIST: FParams
|   |   +-- LIST: Block
|   |   |   +-- VAR_DEF: a (sym: a, id: 33)
|   |   |   |   +-- CONST (int value: 5)
|   |   |   +-- ARRAY_DEF: b (sym: b, id: 34)
|   |   |   |   +-- LIST: ArrayIniter
|   |   |   |   |   +-- CONST (int value: 4)
|   |   |   |   |   +-- CONST (int value: 3)
|   |   |   |   |   +-- CONST (int value: 2)
|   |   |   |   |   +-- CONST (int value: 1)
|   |   |   +-- ARRAY_DEF: c (sym: c, id: 35)
|   |   |   |   +-- LIST: ArrayIniter
|   |   |   |   |   +-- LIST: ArrayIniter
|   |   |   |   |   |   +-- CONST (int value: 1)
|   |   |   |   |   |   +-- CONST (int value: 2)
|   |   |   |   |   +-- LIST: ArrayIniter
|   |   |   |   |   |   +-- CONST (int value: 3)
|   |   |   |   |   |   +-- CONST (int value: 4)
|   |   |   +-- RETURN_STMT
|   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   |   |   |   +-- VAR (sym: a, id: 33)
|   |   |   |   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: data, id: 26)
|   |   |   |   |   |   |   |   |   +-- CONST (int value: 1)
|   |   |   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: b, id: 34)
|   |   |   |   |   |   |   |   +-- CONST (int value: 3)
|   |   |   |   |   |   +-- CONST (int value: 14)
|   |   |   |   |   +-- FUNC_CALL: sum (sym: sum, id: 28)
|   |   |   |   |   |   +-- ARRAY (sym: b, id: 34)
|   |   |   |   |   |   +-- ARRAY_ACCESS: Dims (sym: c, id: 35)
|   |   |   |   |   |   |   +-- CONST (int value: 0)
|   |   |   |   |   |   +-- ARRAY (sym: data2, id: 27)

--- Permanent Symbol Table ---
ID    Name                 Type            Data Type  Scope      Shape     
---------------------------------------------------------------------------
0     getint               function        int        1          N/A       
1     getch                function        int        1          N/A       
2     getfloat             function        float      1          N/A       
3     getarray             function        int        1          N/A       
4     array                array           int        2          0
5     getfarray            function        int        1          N/A       
6     array                array           float      2          0
7     putint               function        void       1          N/A       
8     value                var             int        2          N/A       
9     putch                function        void       1          N/A       
10    value                var             int        2          N/A       
11    putfloat             function        void       1          N/A       
12    value                var             float      2          N/A       
13    putarray             function        void       1          N/A       
14    len                  var             int        2          N/A       
15    array                array           int        2          0
16    putfarray            function        void       1          N/A       
17    len                  var             int        2          N/A       
18    array                array           float      2          0
19    putf                 function        void       1          N/A       
20    format_string        var             char       2          N/A       
21    value                var             int        2          N/A       
22    starttime            function        void       1          N/A       
23    stoptime             function        void       1          N/A       
24    g                    const var       int        1          N/A       
25    N                    const var       int        1          N/A       
26    data                 array           int        1          10000
27    data2                array           int        1          10000 5
28    sum                  function        int        1          N/A       
29    a                    array           int        2          0
30    arr                  array           int        2          0
31    arr2                 array           int        2          0 5
32    main                 function        int        1          N/A       
33    a                    var             int        3          N/A       
34    b                    array           int        3          10
35    c                    array           int        3          5 5
---------------------------------------------------------------------------

--- Generated IR ---
; ModuleID = 'main'

@g.24 = internal global i32 14
@N.25 = internal global i32 10000
@data.26 = external global [10000 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4]
@data2.27 = external global [10000 x [5 x i32]] [[5 x i32] [i32 1], [5 x i32] [i32 2, i32 3]]

define i32 @sum(i32* %param.a.29, i32* %param.arr.30, [5 x i32]* %param.arr2.31) {
sum.entry:
  %0 = getelementptr i32*, i32* %param.a.29, i32 0
  %1 = load i32, i32* %0
  %2 = getelementptr i32*, i32* %param.arr.30, i32 0
  %3 = load i32, i32* %2
  %add.0 = add i32 %1, %3
  %4 = getelementptr i32*, i32* %param.arr.30, i32 1
  %5 = load i32, i32* %4
  %add.1 = add i32 %add.0, %5
  %6 = getelementptr [5 x i32]*, [5 x i32]* %param.arr2.31, i32 0, i32 0
  %7 = load i32, i32* %6
  %add.2 = add i32 %add.1, %7
  %8 = getelementptr [5 x i32]*, [5 x i32]* %param.arr2.31, i32 0, i32 1
  %9 = load i32, i32* %8
  %add.3 = add i32 %add.2, %9
  ret i32 %add.3
}

define i32 @main() {
main.entry:
  %a.33 = alloca i32
  store i32 5, i32* %a.33
  %b.34 = alloca [10 x i32]
  %b.34.initer = alloca i32
  store i32 0, i32* %b.34.initer
  br label %b.34.initer.while.cond
b.34.initer.while.cond:
  %lt.4 = icmp slt i32* %b.34.initer, 10
  br i1 %lt.4, label %b.34.initer.while.loop, label %b.34.initer.while.merge
b.34.initer.while.loop:
  %10 = load i32, i32* %b.34.initer
  %11 = getelementptr [10 x i32], [10 x i32]* %b.34, i32 %10
  store i32 0, i32* %11
  %12 = add i32* %b.34.initer, 1
  store i32* %12, i32* %b.34.initer
  br label %b.34.initer.while.cond
b.34.initer.while.merge:
  %13 = getelementptr [10 x i32], [10 x i32]* %b.34, i32 3
  store i32 1, i32* %13
  %14 = getelementptr [10 x i32], [10 x i32]* %b.34, i32 2
  store i32 2, i32* %14
  %15 = getelementptr [10 x i32], [10 x i32]* %b.34, i32 1
  store i32 3, i32* %15
  %16 = getelementptr [10 x i32], [10 x i32]* %b.34, i32 0
  store i32 4, i32* %16
  %c.35 = alloca [5 x [5 x i32]]
  %c.35.initer = alloca i32
  store i32 0, i32* %c.35.initer
  br label %c.35.initer.while.cond
c.35.initer.while.cond:
  %lt.5 = icmp slt i32* %c.35.initer, 25
  br i1 %lt.5, label %c.35.initer.while.loop, label %c.35.initer.while.merge
c.35.initer.while.loop:
  %17 = load i32, i32* %c.35.initer
  %18 = getelementptr [25 x i32], [5 x [5 x i32]]* %c.35, i32 %17
  store i32 0, i32* %18
  %19 = add i32* %c.35.initer, 1
  store i32* %19, i32* %c.35.initer
  br label %c.35.initer.while.cond
c.35.initer.while.merge:
  %20 = getelementptr [25 x i32], [5 x [5 x i32]]* %c.35, i32 6
  store i32 4, i32* %20
  %21 = getelementptr [25 x i32], [5 x [5 x i32]]* %c.35, i32 5
  store i32 3, i32* %21
  %22 = getelementptr [25 x i32], [5 x [5 x i32]]* %c.35, i32 1
  store i32 2, i32* %22
  %23 = getelementptr [25 x i32], [5 x [5 x i32]]* %c.35, i32 0
  store i32 1, i32* %23
  %6 = load i32, i32* %a.33
  %24 = getelementptr [10000 x i32], [10000 x i32]* @data.26, i32 1
  %25 = load i32, i32* %24
  %add.7 = add i32 %6, %25
  %26 = getelementptr [10 x i32], [10 x i32]* %b.34, i32 3
  %27 = load i32, i32* %26
  %add.8 = add i32 %add.7, %27
  %add.9 = add i32 %add.8, 14
  %28 = getelementptr [5 x [5 x i32]], [5 x [5 x i32]]* %c.35, i32 0
  %29 = load [5 x i32], [5 x i32]* %28
  %10 = call i32 @sum([10 x i32]* %b.34, [5 x i32] %29, [10000 x [5 x i32]]* @data2.27)
  %add.11 = add i32 %add.9, %10
  ret i32 %add.11
}


