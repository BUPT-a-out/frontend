Parsing completed successfully.

--- Abstract Syntax Tree ---
+-- ROOT
|   +-- FUNC_DEF: main (sym: main, id: 24)
|   |   +-- LIST: FParams
|   |   +-- LIST: Block
|   |   |   +-- VAR_DEF: a (sym: a, id: 25)
|   |   |   |   +-- CONST (int value: 0)
|   |   |   +-- VAR_DEF: b (sym: b, id: 26)
|   |   |   |   +-- CONST (int value: 1)
|   |   |   +-- VAR_DEF: result (sym: result, id: 27)
|   |   |   |   +-- CONST (int value: 0)
|   |   |   +-- IF_STMT
|   |   |   |   +-- BINARY_OP: &&
|   |   |   |   |   +-- VAR (sym: a, id: 25)
|   |   |   |   |   +-- VAR (sym: b, id: 26)
|   |   |   |   +-- LIST: If-2
|   |   |   |   |   +-- ASSIGN_STMT
|   |   |   |   |   |   +-- VAR (sym: result, id: 27)
|   |   |   |   |   |   +-- CONST (int value: 1)
|   |   |   +-- IF_STMT
|   |   |   |   +-- BINARY_OP: ||
|   |   |   |   |   +-- VAR (sym: b, id: 26)
|   |   |   |   |   +-- VAR (sym: a, id: 25)
|   |   |   |   +-- LIST: If-2
|   |   |   |   |   +-- ASSIGN_STMT
|   |   |   |   |   |   +-- VAR (sym: result, id: 27)
|   |   |   |   |   |   +-- BINARY_OP: +
|   |   |   |   |   |   |   +-- VAR (sym: result, id: 27)
|   |   |   |   |   |   |   +-- CONST (int value: 10)
|   |   |   +-- IF_STMT
|   |   |   |   +-- UNARY_OP: !
|   |   |   |   |   +-- VAR (sym: result, id: 27)
|   |   |   |   +-- LIST: If-2
|   |   |   |   |   +-- RETURN_STMT
|   |   |   |   |   |   +-- VAR (sym: b, id: 26)
|   |   |   +-- RETURN_STMT
|   |   |   |   +-- VAR (sym: result, id: 27)

--- Permanent Symbol Table ---
ID    Name                 Type            Data Type  Scope      Shape     
---------------------------------------------------------------------------
0     getint               function        int        1          N/A       
1     getch                function        int        1          N/A       
2     getfloat             function        float      1          N/A       
3     getarray             function        int        1          N/A       
4     array                array           int        2          0
5     getfarray            function        int        1          N/A       
6     array                array           float      2          0
7     putint               function        void       1          N/A       
8     value                var             int        2          N/A       
9     putch                function        void       1          N/A       
10    value                var             int        2          N/A       
11    putfloat             function        void       1          N/A       
12    value                var             float      2          N/A       
13    putarray             function        void       1          N/A       
14    len                  var             int        2          N/A       
15    array                array           int        2          0
16    putfarray            function        void       1          N/A       
17    len                  var             int        2          N/A       
18    array                array           float      2          0
19    putf                 function        void       1          N/A       
20    format_string        var             char       2          N/A       
21    value                var             int        2          N/A       
22    starttime            function        void       1          N/A       
23    stoptime             function        void       1          N/A       
24    main                 function        int        1          N/A       
25    a                    var             int        3          N/A       
26    b                    var             int        3          N/A       
27    result               var             int        3          N/A       
---------------------------------------------------------------------------

--- Generated IR ---
; ModuleID = 'main'

define i32 @main() {
entry:
  %a.25 = alloca i32
  store i32 0, i32* %a.25
  %b.26 = alloca i32
  store i32 1, i32* %b.26
  %result.27 = alloca i32
  store i32 0, i32* %result.27
  %0 = load i32, i32* %a.25
  %tobool.1 = icmp ne i32 %0, 0
  br i1 %tobool.1, label %and.1.rhs, label %and.1.merge
and.1.rhs:
  %2 = load i32, i32* %b.26
  %tobool.3 = icmp ne i32 %2, 0
  br label %and.1.merge
and.1.merge:
  %and.1.result = phi i1 [ 0, %entry ], [ %tobool.3, %and.1.rhs ]
  br i1 %and.1.result, label %if.0.then, label %if.0.merge
if.0.then:
  store i32 1, i32* %result.27
  br label %if.0.merge
if.0.merge:
  %4 = load i32, i32* %b.26
  %tobool.5 = icmp ne i32 %4, 0
  br i1 %tobool.5, label %or.3.merge, label %or.3.rhs
or.3.rhs:
  %6 = load i32, i32* %a.25
  %tobool.7 = icmp ne i32 %6, 0
  br label %or.3.merge
or.3.merge:
  %or.3.result = phi i1 [ 1, %if.0.merge ], [ %tobool.7, %or.3.rhs ]
  br i1 %or.3.result, label %if.2.then, label %if.2.merge
if.2.then:
  %8 = load i32, i32* %result.27
  %add.9 = add i32 %8, 10
  store i32 %add.9, i32* %result.27
  br label %if.2.merge
if.2.merge:
  %10 = load i32, i32* %result.27
  %not.11 = icmp eq i32 %10, 0
  br i1 %not.11, label %if.4.then, label %if.4.merge
if.4.then:
  %12 = load i32, i32* %b.26
  ret i32 %12
if.4.merge:
  %13 = load i32, i32* %result.27
  ret i32 %13
}


